for (j in 1:grp.max.col)
{
gj=nz.g.col[j]
# Random select coe.max/grp.max non-zero cells for each non-zero group
nz.ce=sort(sample(1:(g.row.len*g.col.len), as.integer(coe.max/grp.max), replace=F), decreasing=FALSE)
nz.g[(i-1)*grp.max.col+j, 3:(2+as.integer(coe.max/grp.max))] <- nz.ce
# Random a number between -1 to 1 for each non-zero cell
for (k in nz.ce)
{
Beta0[g.row.len*(gi-1)+(k-1)%/%g.col.len+1, g.col.len*(gj-1)+(k-1)%%g.col.len+1]=runif(1, -1, 1)
}
}
}
E0=matrix(rnorm(N*q, mean=0, sd=1), N, q)
Y0 <- X0%*%Beta0+E0
return(list(X=X0, Beta=Beta0, Y=Y0, E=E0, nz.group=nz.g))
}
# Usage
N=25 # number of samples
p=50 # number of variables
q=2500 # number of tasks
n.g.row=10 # 10 groups of variables, each with 5 coefficients
n.g.col=100 # 100 groups of tasks, each with 25 coefficients.
grp.max.row=5 # maximum 5 non-zero groups allowed for row
grp.max.col=20 # maximum 20 non-zero groups allowed for column
grp.max=100 # maximum 100 non-zero groups
coe.max=1500 # maximum 1500 non-zero coefficients allowed
data <- SimMax(N, p, q, n.g.row, n.g.col, grp.max.row, grp.max.col, grp.max, coe.max)
View(data)
View(data)
data[["nz.group"]]
# G.matr is the a matrix of group boundaries, with each row indicating a group, four columns indicate the rowstart, rowend, columnstart and columnend of the group.
## witch starts at 1 and ends at p(number of variables). The group is the variables in each (]-interval (except for the first interval, which is [] contains 1)
trunc <- function (n)
{
if (n>0)
{
return(n)
}
else
{
return(0)
}
}
PgaSgl <- function(X, Y, G.matr, iter.max, grp.max, coe.max)
{
N=dim(X)[1] # number of samples
p=dim(X)[2] # number of variables
q=dim(Y)[2] # number of tasks
v=0.5*norm(X,'F')^(-2) # iteration step size
rss=rep(0,iter.max) # resisual sum square
n.g=dim(G.matr)[1] # number of groups
beta <- matrix(rep(0, p*q), nrow=p, ncol=q, byrow=TRUE)
tau <- rep(0, iter.max)
lambda <- rep(0, iter.max)
for (k in 1:iter.max)
{
z=beta-2*v*(t(X)%*%(X%*%beta-Y))
# z.g.norm=rep(0, n.g)
z.g.b.norm=rep(0, n.g)
tau[k]=sort(abs(z),decreasing=TRUE)[coe.max+1]/v
for (g in 1:n.g)
{
grp.row.start=G.matr[g,1]
grp.row.end=G.matr[g,2]
grp.col.start=G.matr[g,3]
grp.col.end=G.matr[g,4]
z.g=z[grp.row.start:grp.row.end, grp.col.start:grp.col.end]
row.len = dim(z.g)[1] # row length of z.g
col.len = dim(z.g)[2] # column length of z.g
z.g.b=matrix(rep(0,row.len*col.len), nrow=row.len, ncol=col.len, byrow=T)
for (i in 1:row.len)
{
for (j in 1:col.len)
{
z.g.b[i,j]=trunc(abs(z.g[i,j])-v*tau[k])
}
}
z.g.b.norm[g]=norm(z.g.b, 'F')
}
lambda[k]=sort(z.g.b.norm, decreasing = TRUE)[grp.max+1]/v
for (g in 1:n.g)
{
grp.row.start=G.matr[g,1]
grp.row.end=G.matr[g,2]
grp.col.start=G.matr[g,3]
grp.col.end=G.matr[g,4]
z.g=z[grp.row.start:grp.row.end, grp.col.start:grp.col.end]
row.len = dim(z.g)[1] # row length of z.g
col.len = dim(z.g)[2] # column length of z.g
z.g.b=matrix(rep(0,row.len*col.len), nrow=row.len, ncol=col.len, byrow=T)
for (i in 1:row.len)
{
for (j in 1:col.len)
{
z.g.b[i,j]=trunc(abs(z.g[i,j])-v*tau[k])
}
}
beta.g=matrix(rep(0,row.len*col.len), nrow=row.len, ncol=col.len, byrow=T)
for (i in 1:row.len)
{
for (j in 1:col.len)
{
beta.g[i,j]=trunc((norm(z.g.b,'F')-v*lambda[k])/norm(z.g.b,'F'))*z.g.b[i,j]*sign(z.g[i,j])
}
}
beta[grp.row.start:grp.row.end, grp.col.start:grp.col.end] <- beta.g
}
rss[k]=norm(X%*%beta-Y,'F')
}
return(list(Beta=beta, Rss=rss, Tau=tau, Lambda=lambda))
}
# Usage
X=data$X
Y=data$Y
iter.max=200
grp.max=100
coe.max=1500
col1 <- rep(seq(1, 46, 5), each=25)
col2 <- rep(seq(5, 50, 5),each=25)
col3 <- rep(seq(1, 2401, 100), 10)
col4 <- rep(seq(100, 2500, 100), 10)
G.matr <- matrix(c(col1, col2, col3, col4), nrow=250, ncol=4, byrow=F)
system.time(try <- PgaSgl(X, Y, G.matr, iter.max, grp.max, coe.max))
image(data$Beta)
image(try$Beta)
View(try)
try[["Rss"]]
#########Generate simulation dataset ############
# Function
SimMax <- function (N, p, q, n.g.row, n.g.col, grp.max.row, grp.max.col, grp.max, coe.max)
{
set.seed(sample(1:100,1)) # Select a random number between 1-100 as seed. # set.see for reproduce the random latter.
X0 <- matrix(rnorm(N*p, mean=0, sd=1), N, p)
g.row.len = as.integer(p/n.g.row) # number of rows in each group
g.col.len = as.integer(q/n.g.col) # number of columns in each group
Beta0=matrix(rep(0, p*q), nrow=p, ncol=q, byrow=TRUE)
# Define matrix nz.g as a indicator matrix, which each row is a selected group with column1 as its row index and column2 as its column index, and the reset of columns are the intra-group index of non-zero elements.
nz.g <- matrix(rep(0, grp.max.row*grp.max.col*(2+as.integer(coe.max/grp.max))), nrow=grp.max.row*grp.max.col)
# random select rows of groups with non-zero groups
nz.g.row <- sort(sample(1:n.g.row, grp.max.row, replace=F), decreasing=FALSE)
nz.g[,1] <- rep(nz.g.row, each=grp.max.col)
for (i in 1:grp.max.row)
{
gi=nz.g.row[i]
# random select columns of groups with non-zero groups
nz.g.col <- sort(sample(1:n.g.col, grp.max.col, replace=F), decreasing=FALSE)
nz.g[((i-1)*20+1):(i*20),2] <- nz.g.col
for (j in 1:grp.max.col)
{
gj=nz.g.col[j]
# Random select coe.max/grp.max non-zero cells for each non-zero group
nz.ce=sort(sample(1:(g.row.len*g.col.len), as.integer(coe.max/grp.max), replace=F), decreasing=FALSE)
nz.g[(i-1)*grp.max.col+j, 3:(2+as.integer(coe.max/grp.max))] <- nz.ce
# Random a number between -1 to 1 for each non-zero cell
for (k in nz.ce)
{
Beta0[g.row.len*(gi-1)+(k-1)%/%g.col.len+1, g.col.len*(gj-1)+(k-1)%%g.col.len+1]=runif(1, -1, 1)
}
}
}
E0=matrix(rnorm(N*q, mean=0, sd=1), N, q)
Y0 <- X0%*%Beta0+E0
return(list(X=X0, Beta=Beta0, Y=Y0, E=E0, nz.group=nz.g))
}
# Usage
N=25 # number of samples
p=50 # number of variables
q=2500 # number of tasks
n.g.row=10 # 10 groups of variables, each with 5 coefficients
n.g.col=100 # 100 groups of tasks, each with 25 coefficients.
grp.max.row=5 # maximum 5 non-zero groups allowed for row
grp.max.col=20 # maximum 20 non-zero groups allowed for column
grp.max=100 # maximum 100 non-zero groups
coe.max=1500 # maximum 1500 non-zero coefficients allowed
data <- SimMax(N, p, q, n.g.row, n.g.col, grp.max.row, grp.max.col, grp.max, coe.max)
############# PgaMSgl #################
# G.matr is the a matrix of group boundaries, with each row indicating a group, four columns indicate the rowstart, rowend, columnstart and columnend of the group.
## witch starts at 1 and ends at p(number of variables). The group is the variables in each (]-interval (except for the first interval, which is [] contains 1)
trunc <- function (n)
{
if (n>0)
{
return(n)
}
else
{
return(0)
}
}
PgaSgl <- function(X, Y, G.matr, iter.max, grp.max, coe.max)
{
N=dim(X)[1] # number of samples
p=dim(X)[2] # number of variables
q=dim(Y)[2] # number of tasks
v=0.5*norm(X,'F')^(-2) # iteration step size
rss=rep(0,iter.max) # resisual sum square
n.g=dim(G.matr)[1] # number of groups
beta <- matrix(rep(0, p*q), nrow=p, ncol=q, byrow=TRUE)
tau <- rep(0, iter.max)
lambda <- rep(0, iter.max)
for (k in 1:iter.max)
{
z=beta-2*v*(t(X)%*%(X%*%beta-Y))
# z.g.norm=rep(0, n.g)
z.g.b.norm=rep(0, n.g)
tau[k]=sort(abs(z),decreasing=TRUE)[coe.max+1]/v
for (g in 1:n.g)
{
grp.row.start=G.matr[g,1]
grp.row.end=G.matr[g,2]
grp.col.start=G.matr[g,3]
grp.col.end=G.matr[g,4]
z.g=z[grp.row.start:grp.row.end, grp.col.start:grp.col.end]
row.len = dim(z.g)[1] # row length of z.g
col.len = dim(z.g)[2] # column length of z.g
z.g.b=matrix(rep(0,row.len*col.len), nrow=row.len, ncol=col.len, byrow=T)
for (i in 1:row.len)
{
for (j in 1:col.len)
{
z.g.b[i,j]=trunc(abs(z.g[i,j])-v*tau[k])
}
}
z.g.b.norm[g]=norm(z.g.b, 'F')
}
lambda[k]=sort(z.g.b.norm, decreasing = TRUE)[grp.max+1]/v
for (g in 1:n.g)
{
grp.row.start=G.matr[g,1]
grp.row.end=G.matr[g,2]
grp.col.start=G.matr[g,3]
grp.col.end=G.matr[g,4]
z.g=z[grp.row.start:grp.row.end, grp.col.start:grp.col.end]
row.len = dim(z.g)[1] # row length of z.g
col.len = dim(z.g)[2] # column length of z.g
z.g.b=matrix(rep(0,row.len*col.len), nrow=row.len, ncol=col.len, byrow=T)
for (i in 1:row.len)
{
for (j in 1:col.len)
{
z.g.b[i,j]=trunc(abs(z.g[i,j])-v*tau[k])
}
}
beta.g=matrix(rep(0,row.len*col.len), nrow=row.len, ncol=col.len, byrow=T)
for (i in 1:row.len)
{
for (j in 1:col.len)
{
beta.g[i,j]=trunc((norm(z.g.b,'F')-v*lambda[k])/norm(z.g.b,'F'))*z.g.b[i,j]*sign(z.g[i,j])
}
}
beta[grp.row.start:grp.row.end, grp.col.start:grp.col.end] <- beta.g
}
rss[k]=norm(X%*%beta-Y,'F')
}
return(list(Beta=beta, Rss=rss, Tau=tau, Lambda=lambda))
}
# Usage
X=data$X
Y=data$Y
iter.max=2000
grp.max=100
coe.max=1500
col1 <- rep(seq(1, 46, 5), each=25)
col2 <- rep(seq(5, 50, 5),each=25)
col3 <- rep(seq(1, 2401, 100), 10)
col4 <- rep(seq(100, 2500, 100), 10)
G.matr <- matrix(c(col1, col2, col3, col4), nrow=250, ncol=4, byrow=F)
system.time(try <- PgaSgl(X, Y, G.matr, iter.max, grp.max, coe.max))
try$Rss
system.time(3*4-2)
system.time(3*4-2)[1]
system.time(3*4-2)$user
system("ls ")
typeof(system.time)
typeof(system.time(3*4))
aa <- system.time(3*4-3)
aa
aa <- system.time(3*4-3)[1]
aa
aa <- system.time(3*4-3)[user]
aa+3
bb <- system.time(555+333)[1]
aa+bb
bb
system.time(555+333)[1]
system.time(555+333)[2]
system.time(555+333)[3]
system.time(555+333)[4]
180*4*30/60/60
library(glmnet)
install.packages("glmnet")
library(glmnet)
x=matrix(rnorm(100*20),100,20)
x
y=rnorm(100)
g2=sample(1:2, 100, replace=TRUE)
g2
g4=sample(1:4, 100, replace=TRUE)
g4
y
fit1=glmnet(x,y)
fit1
View(fit1)
predict(fit1,newx=x[1:5,],s=c(0.01,0.005))
x[1:5,]
predict(fit1, type="coef")
plot(fit1, xvar="lambda")
fit2=glmnet(x,g2,family="binomial")
predict(fit2,type="response", newx=x[2:5,])
predict(fit2, type="nonzero")
fit3=glmnet(x,g4,family="multinomial")
library(MSGLasso)
set.seed(sample(1:100,1))
G.arr <- c(0,20,20,20,20,20,20,20,20,20,20)
data("Beta.m")
simDataGen<-function(N, Beta, rho, s, G.arr, seed=1){
P<-nrow(Beta)
Q<-ncol(Beta)
gsum<-0
X.m<-NULL
set.seed(seed)
Sig<-matrix(0,P,P)
jstart <-1
for(g in 1:length(G.arr)-1){
X.m<-cbind(X.m, matrix(rnorm(N*G.arr[g+1]),N,G.arr[g+1], byrow=TRUE))
for(i in 2:P){ for(j in jstart: (i-1)){
Sig[i,j]<-rho^(abs(i-j))
Sig[j,i]<-Sig[i,j]
}}
jstart <- jstart + G.arr[g+1]
}
diag(Sig)<-1
R<-chol(Sig)
X.m<-X.m%*%R
SVsum <-0
for (q in 1:Q){SVsum <-SVsum+var(X.m %*% Beta[,q])}
sdr =sqrt(s*SVsum/Q)
E.m <- matrix(rnorm(N*Q,0,sdr),N, Q, byrow=TRUE)
Y.m<-X.m%*%Beta+E.m
return(list(X=X.m, Y=Y.m, E=E.m))
}
N <-150
rho=0.5;
s=4;
Data <- simDataGen(N, Beta.m,rho, s, G.arr, seed=sample(1:100,1))
X.m<-Data$X
Y.m<-Data$Y
P <- dim(Beta.m)[1]
Q <- dim(Beta.m)[2]
G <- 10
R <- 10
gmax <- 1
cmax <- 20
GarrStarts <- c(0,20,40,60,80,100,120,140,160,180)
GarrEnds <- c(19,39,59,79,99,119,139,159,179,199)
RarrStarts <- c(0,20,40,60,80,100,120,140,160,180)
RarrEnds <- c(19,39,59,79,99,119,139,159,179,199)
tmp <- FindingPQGrps(P, Q, G, R, gmax, GarrStarts, GarrEnds, RarrStarts, RarrEnds)
PQgrps <- tmp$PQgrps
tmp1 <- Cal_grpWTs(P, Q, G, R, gmax, PQgrps)
grpWTs <- tmp1$grpWTs
tmp2 <- FindingGRGrps(P, Q, G, R, cmax, GarrStarts, GarrEnds, RarrStarts, RarrEnds)
GRgrps <- tmp2$GRgrps
Pen_L <- matrix(rep(1,P*Q),P,Q, byrow=TRUE)
Pen_G <- matrix(rep(1,G*R),G,R, byrow=TRUE)
grp_Norm0 <- matrix(rep(0, G*R), nrow=G, byrow=TRUE)
View(GRgrps)
View(grp_Norm0)
View(grpWTs)
View(Pen_G)
View(Pen_L)
View(PQgrps)
lam1.v <- seq(1.0, 1.5, length=6)
lamG.v <- seq(0.19, 0.25, length=7)
try.cv<- MSGLasso.cv(X.m, Y.m, grpWTs, Pen_L, Pen_G, PQgrps, GRgrps,
lam1.v, lamG.v, fold=5, seed=1)
View(try.cv)
try.cv[["rss.cv"]]
try.cv[["lams.c"]]
which.min(as.vector(try.cv$rss.cv))
try.cv$lams.c[which.min(as.vector(try.cv$rss.cv))]
try.cv$lams.c[which.min(as.vector(try.cv$rss.cv))][[1]]
MSGLassolamG.m <- matrix(rep(MSGLassolamG, G*R),G,R,byrow=TRUE)
MSGLassolam1 <- try.cv$lams.c[which.min(as.vector(try.cv$rss.cv))][[1]]$lam1
MSGLassolamG  <- try.cv$lams.c[which.min(as.vector(try.cv$rss.cv))][[1]]$lam3
MSGLassolamG.m <- matrix(rep(MSGLassolamG, G*R),G,R,byrow=TRUE)
View(MSGLassolamG.m)
system.time(try <-MSGLasso(X.m, Y.m, grpWTs, Pen_L, Pen_G, PQgrps, GRgrps,
grp_Norm0, MSGLassolam1, MSGLassolamG.m, Beta0=NULL))
View(try)
try[["Beta"]]
norm(try$Beta-Beta.m, 'F')/norm(Beta.m, 'F')
(norm(X.m%*%try$Beta-Y.m,'F'))^2/norm(Y.m, 'F')^2
(norm(X.m%*%try$Beta-Y.m,'F'))^2
library(WGCNA)
library("WGCNA")
library(WGCAN)
library(WGCNA)
library(ggplot2)
pf(97.129, 2, 16, lower.tail=FALSE)
111 11.181 -15   -4.1089 3.7185
pf(-4.1089, -15, 111, lower.tail=FALSE)
pf(-4.1089, 15, 111, lower.tail=FALSE)
pf(4.1089, 15, 111, lower.tail=FALSE)
pf(3.7185, 15, 111, lower.tail=FALSE)
pf(3.7185, -15, 111, lower.tail=FALSE)
pf(3.7185, 15, 96, lower.tail=FALSE)
require(installr)
updateR()
setwd("C:/Users/JW Lab user/Google Drive/P11.RegulatoryPattern/Code/PGA_MSGL_C/PgaMsgl")
sessionInfo()
packageVersion(Rcpp)
packageVersion("Rcpp")
packageVersion("RcppEigen")
devtools::document()
devtools::document()
library(PgaMsgl)
data(lowD)
result <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, lowD$mg, lowD$mc)
devtools::document()\
devtools::document()
search()
installed.packages()
package_version("roxygen2")
package_version("roxygen2")
devtools::document()
library(PgaMsgl)
data(lowD)
result <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, lowD$mg, lowD$mc)
mg.v <- seq(from=0.01*100, to=0.8*100, by=0.02*100)
mc.v <- seq(from = 0.01*2500, to = 0.5*2500, by = 0.01*2500)
result.cv <- PgaMsgl.cv(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, mg.v, mc.v, fold=5, seed=1, ncores=4)
devtools::document()
library(PgaMsgl)
result.cv <- PgaMsgl.cv(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, mg.v, mc.v, fold=5, seed=1, ncores=4)
devtools::document()
library(PgaMsgl)
result.cv <- PgaMsgl.cv(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, mg.v, mc.v, fold=5, seed=1, ncores=4)
devtools::document()
library(PgaMsgl)
result.cv <- PgaMsgl.cv(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, mg.v, mc.v, fold=5, seed=1, ncores=4)
grp.max.cv.rss <- result.cv$mg.v[which.min(result.cv$rss)]
coe.max.cv.rss <- result.cv$mc.v[which.min(result.cv$rss)]
grp.max.cv.rmse <- result.cv$mg.v[which.min(result.cv$RMSE)]
coe.max.cv.rmse <- result.cv$mc.v[which.min(result.cv$RMSE)]
grp.max.cv.r2 <- result.cv$mg.v[which.max(result.cv$Rsquare)]
coe.max.cv.r2 <- result.cv$mc.v[which.max(result.cv$Rsquare)]
system.time(try1 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, 10, 120))
system.time(try2 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, grp.max.cv.rss, coe.max.cv.rss))
system.time(try3 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, grp.max.cv.rmse, coe.max.cv.rmse))
system.time(try4 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, grp.max.cv.r2, coe.max.cv.r2))
try1$Rss_relative[try1$iteration.time]
try2$Rss_relative[try2$iteration.time]
try3$Rss_relative[try3$iteration.time]
try4$Rss_relative[try4$iteration.time]
result$Rss_relative[result$iteration.time]
system.time(result.cv <- PgaMsgl.cv(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, mg.v, mc.v, fold=5, seed=1, ncores=4))
length(mc.v)*length(mg.v)
251.77/2000
library(PgaMsgl)
data(lowD)
mg.v <- seq(from=0.01*100, to=0.8*100, by=0.02*100)
mc.v <- seq(from = 0.01*2500, to = 0.5*2500, by = 0.01*2500)
result.cv <- PgaMsgl.cv(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, mg.v, mc.v, fold=5, seed=1, ncores=4)
grp.max.cv.rss <- result.cv$mg.v[which.min(result.cv$rss)]
coe.max.cv.rss <- result.cv$mc.v[which.min(result.cv$rss)]
grp.max.cv.rmse <- result.cv$mg.v[which.min(result.cv$RMSE)]
coe.max.cv.rmse <- result.cv$mc.v[which.min(result.cv$RMSE)]
grp.max.cv.r2 <- result.cv$mg.v[which.max(result.cv$Rsquare)]
coe.max.cv.r2 <- result.cv$mc.v[which.max(result.cv$Rsquare)]
system.time(try1 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, 10, 120))
system.time(try2 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, grp.max.cv.rss, coe.max.cv.rss))
system.time(try3 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, grp.max.cv.rmse, coe.max.cv.rmse))
system.time(try4 <- PgaMsgl(lowD$X, lowD$Y, lowD$B0, model="L121", lowD$Gm, lowD$mi, grp.max.cv.r2, coe.max.cv.r2))
data(highD)
system.time(highD_result <- PgaMsgl(highD$X, highD$Y, highD$B0, model="L121", highD$Gm, highD$mi, highD$mg, highD$mc))
system.time(highD_result <- PgaMsgl(highD$X, highD$Y, highD$B0, model="L121", highD$Gm, highD$mi, highD$mg, highD$mc))
detectCores(all.tests = FALSE, logical = TRUE)
library(doParallel)
detectCores(all.tests = FALSE, logical = TRUE)
detectCores(all.tests = FALSE, logical = FALSE)
detectCores()
ncores=NULL
if(!ncores){print("hello")}
if(ncores==NULL){print("hello")}
if(ncores=="NULL"){print("hello")}
ncores=4
if(ncores > detectCores()){print(detectCores())}else{print(ncores)}
ncores=32
if(ncores > detectCores()){print(detectCores())}else{print(ncores)}
ncores=NULL
if(ncores==''){print("hello")}
if(exists(ncores)){print("hello")}
if(ncores==''){print(detectCores())}else{print(ncores)}
ncores==''
!ncores==''
is.null(ncores)
ss <- function(a,b){}
ss <- function(a,b){
if(is.null(b)){return(a+0)}else{return(a+b)}
}
ss(3)
ss(3,4)
ss <- function(a,b=NULL){
if(is.null(b)){return(a+0)}else{return(a+b)}
}
ss(3)
ss(7)
ss(7,8)
library(PgaMsgl)
